#!/usr/bin/env python

from clang.cindex import Index
from pprint import pprint

from optparse import OptionParser, OptionGroup

def get_diag_info(diag):
    return { 'severity' : diag.severity,
             'location' : diag.location,
             'spelling' : diag.spelling,
             'ranges' : diag.ranges,
             'fixits' : diag.fixits }

def get_cursor_id(cursor, cursor_list = []):
    if not opts.showIDs:
        return None

    if cursor is None:
        return None

    # FIXME: This is really slow. It would be nice if the index API exposed
    # something that let us hash cursors.
    for i,c in enumerate(cursor_list):
        if cursor == c:
            return i
    cursor_list.append(cursor)
    return len(cursor_list) - 1

def get_info(node, depth=0):
    if opts.maxDepth is not None and depth >= opts.maxDepth:
        children = None
    else:
        children = [get_info(c, depth+1)
                    for c in node.get_children()]
            
    n = { 'id' : get_cursor_id(node),
          'kind' : node.kind,
          'usr' : node.get_usr(),
          'spelling' : node.spelling,
          'location' : node.location,
          'extent.start' : node.extent.start,
          'extent.end' : node.extent.end,
          'is_definition' : node.is_definition(),
          'definition id' : get_cursor_id(node.get_definition()),
          'children' : children }
    referenced = None
    if node.referenced:
        referenced = node.referenced.get_usr()
    print "%s(%d,%d): type:%s, spell:%s, display:%s, def:%s, static:%s, ref: %s, usr:%s" % (node.location.file, node.extent.start.line, node.extent.end.line, node.kind, node.spelling, node.displayname, node.is_definition(), node.is_static_method(), referenced, node.get_usr() )
    return n

def main():
    global opts

    parser = OptionParser("usage: %prog [options] {filename} [clang-args*]")
    parser.add_option("", "--show-ids", dest="showIDs",
                      help="Don't compute cursor IDs (very slow)",
                      default=False)
    parser.add_option("", "--max-depth", dest="maxDepth",
                      help="Limit cursor expansion to depth N",
                      metavar="N", type=int, default=None)
    parser.disable_interspersed_args()
    (opts, args) = parser.parse_args()

    if len(args) == 0:
        parser.error('invalid number arguments')

    index = Index.create()
    tu = index.parse(None, args)
    if not tu:
        parser.error("unable to load input")

    get_info(tu.cursor)
    #pprint(('nodes', get_info(tu.cursor)))

if __name__ == '__main__':
    main()

